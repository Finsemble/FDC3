environments:
  dev:
  stg:
  prod:
---
releases:
  - name: fdc3-demo #{{ requiredEnv "PROJECT_NAME" }}
    namespace: enterprise-demos 
    chart: helm/
    installed: {{ requiredEnv "INSTALLED" }}
    historyMax: 3
    values:
      - kind: Deployment
      - fullnameOverride: fdc3-demo #{{ requiredEnv "PROJECT_NAME" }}
      - serviceAccount:
          create: false
      - replicaCount: 1
      - deploymentAnnotations:
          configmap.reloader.stakater.com/reload: "fdc3-demo"
          # secret.reloader.stakater.com/reload: ""
      - image:
          repository: {{ requiredEnv "CI_REGISTRY" }}/{{ requiredEnv "PROJECT_NAME" }}
          pullPolicy: IfNotPresent
          tag: {{ requiredEnv "IMAGE_TAG" }}
          resources:
            limits:
              memory: "32Mi"
            requests:
              cpu: "200m"
              memory: "8Mi"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - name: default-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          volumes:
          - name: default-config
            configMap:
              name: fdc3-demo
              items:
              - key: "default.conf"
                path: "default.conf"
          - name: nginx-config
            configMap:
              name: fdc3-demo
              items:
              - key: "nginx.conf"
                path: "nginx.conf"
          env:
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 0
      - service:
          enabled: true
          type: NodePort
          ports:
            - name: http
              targetPort: 80
              protocol: TCP
              port: 80
      - ingress:
          enabled: true
          annotations:
            kubernetes.io/ingress.class: alb
            alb.ingress.kubernetes.io/scheme: internet-facing
            alb.ingress.kubernetes.io/certificate-arn: {{ requiredEnv "CERT_ARN" }}
            alb.ingress.kubernetes.io/group.name: ext-{{ mod (randNumeric 1) ( requiredEnv "ALB_INSTANCES" ) }}
            alb.ingress.kubernetes.io/target-node-labels: kubernetes.io/os=linux
            alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
            alb.ingress.kubernetes.io/ssl-redirect: "443"
            alb.ingress.kubernetes.io/healthcheck-path: /
            alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
            alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-1-2017-01
            alb.ingress.kubernetes.io/load-balancer-attributes: routing.http.drop_invalid_header_fields.enabled=true
            alb.ingress.kubernetes.io/target-group-attributes: stickiness.enabled=false,stickiness.lb_cookie.duration_seconds=3600,slow_start.duration_seconds=30,deregistration_delay.timeout_seconds=60
          hosts:
            - host: fdc3-demos.interop.io
              paths:
                - path: /*
                  pathType: ImplementationSpecific
                  backend: 
                    service:
                      name: fdc3-demo #{{ requiredEnv "PROJECT_NAME" }}
                      port:
                        number: 80
      - nodeSelector:
          kubernetes.io/arch: "amd64"
          kubernetes.io/os: "linux"
          builds: 'false'
          github_worker: 'true'
      - configmaps:
          - name: fdc3-demo
            annotations:
              reloader.stakater.com/match: "true" 
            data:
              nginx.conf: |
                user  nginx;
                worker_processes  auto;

                pid        /var/run/nginx.pid;

                events {
                    worker_connections  512;
                }

                http {
                    include       /etc/nginx/mime.types;
                    default_type  application/octet-stream;

                    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                      '$status $body_bytes_sent "$http_referer" '
                                      '"$http_user_agent" "$http_x_forwarded_for"';

                    # access_log          /var/log/nginx/access.log  main;
                    error_log           /var/log/nginx/error.log notice;
                    access_log          off;
                    sendfile            on;
                    #tcp_nopush         on;
                    keepalive_timeout   65;
                    gzip                on;
                    include /etc/nginx/conf.d/*.conf;
                }
              default.conf: |
                server {
                  listen 80;
                  server_name fdc3-demos.interop.io;

                  location /toolbox/fdc3-workbench/ {
                    root   /usr/share/nginx/html;
                    index  index.html index.htm;
                    try_files $uri $uri/ /index.html index.htm;
                  }
                }